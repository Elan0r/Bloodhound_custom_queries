{
  "queries": [{
      "name": "Domain Controller object ownership",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH (g:Group) WHERE g.objectid ENDS WITH '-516' MATCH p = (n:Base)-[:Owns]->(c:Computer)-[:MemberOf*1..]->(g) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "(Warning: edits the DB) Mark unconstrained delegation systems as High Value targets",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2"
      }]
    },
    {
      "name": "(Warning: edits the DB) Mark groups with AdminCount as High Value targets",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (g:Group {admincount: True}) WHERE (g.highvalue) IS NULL OR g.highvalue = False SET g.highvalue = true RETURN g",
        "allowCollapse": true
      }]
    },
    {
      "name": "(Warning: edits the DB) Mark Calculated principals with DCSync Privileges as high.",
      "category": "Mark As High",
      "queryList": [{
          "final": false,
          "title": "Select domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH (n1)-[:MemberOf|GetChanges*1..]->(u:Domain {name:$result}) WITH n1,u MATCH (n1)-[:MemberOf|GetChangesAll*1..]->(u) WITH n1,u MATCH p = (n1)-[:MemberOf|GetChanges|GetChangesAll*1..]->(u) SET n1.highvalue = true RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "(Warning: edits the DB) Mark AZ Global Admin as High Value targets",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) SET n.highvalue = true RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "(Warning: edits the DB) Mark any object that has inbound control over the domain as high.",
      "category": "Mark As High",
      "queryList": [{
          "final": false,
          "title": "Select domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((n)-[r1:MemberOf|AllExtendedRights|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns*1..]->(u:Domain {name:$result})) WHERE NOT n.name=u.domain SET n.highvalue = true RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "(Warning: edits the DB) Mark Domain Admins as High Value targets",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ \"(?i)S-1-5-.*-512\" SET m.highvalue = true RETURN m"
      }]
    },
    {
      "name": "(Warning: edits the DB) Mark Enterprise Admins as High Value targets",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ \"(?i)S-1-5-.*-519\" SET m.highvalue = true RETURN m"
      }]
    },
    {
      "name": "Groups with AdminCount, but not highvalue",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (g:Group {admincount: True}) WHERE (g.highvalue) IS NULL OR g.highvalue = False RETURN g",
        "allowCollapse": true
      }]
    },
    {
      "name": "Non AdminCount groups with Local Admin",
      "category": "Mark As High",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n:Group)-[:AdminTo*1..]->(m:Computer) WHERE NOT n.admincount RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "(Warning: edits the DB) Set Username as Password and PlaintextPW",
      "category": "Owned",
      "queryList": [{
          "final": false,
          "title": "Select a user",
          "query": "MATCH (u:User {enabled: True}) WHERE u.UserNameAsPass IS NULL RETURN u.name ORDER BY u.name ASC"
        },
        {
          "final": true,
          "query": "MATCH (u:User {name:$result}) SET u.UserNameAsPass = true SET u.plaintext = true SET u.owned = true RETURN u",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find owned objects who can DCSync",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n {owned: true})-[r:DCSync]->() RETURN p"
      }]
    },
    {
      "name": "Find all owned users",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m"
      }]
    },
    {
      "name": "Find all owned computers",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
      }]
    },
    {
      "name": "Find all computers where PlaintextPW user can RDP",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN p1"
      }]
    },
    {
      "name": "Find all PlaintextPW users of High Value groups",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
      }]
    },
    {
      "name": "Find all High Value PlaintextPW user",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User) WHERE u.plaintext=True AND u.highvalue=True RETURN u"
      }]
    },
    {
      "name": "Find all PlaintextPW user",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User) WHERE u.plaintext=True RETURN u"
      }]
    },
    {
      "name": "Find all owned groups",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
      }]
    },
    {
      "name": "Find the groups of all owned users",
      "category": "Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p"
      }]
    },
    {
      "name": "Find all High Valued Targets",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
      }]
    },
    {
      "name": "Find all objects who can DCSync",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n)-[r:DCSync]->() RETURN p"
      }]
    },
    {
      "name": "Find all objects who can read LAPS Passwords",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p = ()-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) RETURN p"
      }]
    },
    {
      "name": "Find all objects who can read LAPS Passwords 2",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p = ()-[r:ReadLAPSPassword]->(t:Computer {haslaps:true}) RETURN p"
      }]
    },
    {
      "name": "Find owned objects who can read LAPS Passwords",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n {owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) RETURN p LIMIT 25"
      }]
    },
    {
      "name": "Find owned objects who can read LAPS Passwords 2",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n {owned: true})-[r:ReadLAPSPassword]->(t:Computer {haslaps:true}) RETURN p LIMIT 25"
      }]
    },
    {
      "name": "Find all objects who can read GMSA password (ReadGMSAPassword)",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=()-[r:ReadGMSAPassword]->() RETURN p LIMIT 25"
      }]
    },
    {
      "name": "Find what groups can RDP",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
      }]
    },
    {
      "name": "Find which user can RDP",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m)-[r:CanRDP]->(n) RETURN p"
      }]
    },
    {
      "name": "Find computers Domain Users group can RDP",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(g:Group)-[r:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
      }]
    },
    {
      "name": "Find all groups that contain the word 'admin'",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
      }]
    },
    {
      "name": "Find groups that can reset passwords (HEAVY)",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
      }]
    },
    {
      "name": "Find groups that have local admin rights (HEAVY)",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
      }]
    },
    {
      "name": "Find all High Value target's groups",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
      }]
    },
    {
      "name": "Find all users that have local admin rights",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
      }]
    },
    {
      "name": "Find non Domain Admins with local Admin rights",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) where m.admincount = false Return p"
      }]
    },
    {
      "name": "Find if any domain user has interesting permissions against a GPO (HEAVY)",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
      }]
    },
    {
      "name": "Find if unprivileged users have rights to add members into groups",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
      }]
    },
    {
      "name": "Find any object that has inbound control over the domain.",
      "category": "Admin Hunter",
      "queryList": [{
          "final": false,
          "title": "Select domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((n)-[r1:MemberOf|AllExtendedRights|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns*1..]->(u:Domain {name:$result})) WHERE NOT n.name=u.domain RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find if groups of owned users can do ANYTHING (HEAVY)",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:User {owned: True})-[r1:MemberOf*1..]->(g2:Group)-[r2]->(n) WHERE r2.isacl=true RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find all active Domain Admin sessions",
      "category": "Admin Hunter",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
      }]
    },
    {
      "name": "Shortest Path from owned object - Network",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a object",
          "query": "MATCH (n) WHERE n.owned=true RETURN n.name, n.PwdLastSet ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((a {name:$result})-[:{}*1..]->(b:Computer)) WHERE NOT a=b WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
          "startNode": "{}",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Shortest Path from owned object - Filtered",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a object",
          "query": "MATCH (n) WHERE n.owned=true RETURN n.name, n.PwdLastSet ORDER BY n.name DESC"
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((a {name:$result})-[:{}*1..]->(b:Computer)) WHERE NOT a=b WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
          "startNode": "{}",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Shortest Paths to Domain Admins - ALL",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a Domain Admin group...",
          "query": "MATCH (n:Group) WHERE n.objectid =~ $name RETURN n.name ORDER BY n.name DESC",
          "props": {
            "name": "(?i)S-1-5-.*-512"
          }
        },
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m RETURN p",
          "allowCollapse": false,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest Paths from owned object to Domain Admins group - Network",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a Domain Admin group...",
          "query": "MATCH (n:Group) WHERE n.objectid =~ $name RETURN n.name ORDER BY n.name DESC",
          "props": {
            "name": "(?i)S-1-5-.*-512"
          }
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((n {owned:true})-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Shortest paths from owned objects to High Value targets (5 hops)",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Shortest paths from owned objects to High Value targets",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE g<>n return p"
      }]
    },
    {
      "name": "Most exploitable paths from owned objects to High Value targets (5 hops)",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Next steps (5 hops) from owned objects",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p"
      }]
    },
    {
      "name": "Find the Shortest path to a unconstrained delegation system from owned objects",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
      }]
    },
    {
      "name": "Find ALL Shortest Paths to Domain Admins - Network",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a Domain Admin group...",
          "query": "MATCH (n:Group) WHERE n.objectid =~ $name RETURN n.name ORDER BY n.name DESC",
          "props": {
            "name": "(?i)S-1-5-.*-512"
          }
        },
        {
          "final": true,
          "query": "MATCH p=allShortestPaths((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH p,nodes(p) as nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
          "allowCollapse": false,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Find Shortest Paths to Domain Admins - Network",
      "category": "Admin Hunter - Path",
      "queryList": [{
          "final": false,
          "title": "Select a Domain Admin group...",
          "query": "MATCH (n:Group) WHERE n.objectid =~ $name RETURN n.name ORDER BY n.name DESC",
          "props": {
            "name": "(?i)S-1-5-.*-512"
          }
        },
        {
          "final": true,
          "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH nodes(p) as nds,p MATCH q=((src:Computer)-[:Open]->(trgt:Computer)) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,q,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,q,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p,q",
          "allowCollapse": false,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Find all edges any owned user has on a computer",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p"
      }]
    },
    {
      "name": "Find if owned users can do ANYTHING (HEAVY)",
      "category": "Admin Hunter - Path",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(g:User {owned: True})-[r]->(n) WHERE r.isacl=true RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find Kerberoastable Users with a path to DA",
      "category": "Admin Hunter - Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
      }]
    },
    {
      "name": "Find Privileged kerberoastable users",
      "category": "Admin Hunter - Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((u:User {hasspn:true})-[*1..]->(g:Group)) WHERE g.objectid ENDS WITH '-512' RETURN p LIMIT 100",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find Kerberoastable users and where they are AdminTo",
      "category": "Admin Hunter - Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(u:User {hasspn:true})-[r:AdminTo]->(c:Computer) RETURN p"
      }]
    },
    {
      "name": "Find Kerberoastable users who are members of High Value groups",
      "category": "Admin Hunter - Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
      }]
    },
    {
      "name": "Find all computer who can AllowedToAct or AllowToDelegate",
      "category": "Admin Hunter - Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:Computer),(n {highvalue:true}),p=shortestPath((m)-[r*1..]->(n)) WHERE NONE (r IN relationships(p) WHERE type(r)= 'GetChanges') AND NONE (r in relationships(p) WHERE type(r)='GetChangesAll') AND NOT m=n RETURN p"
      }]
    },
    {
      "name": "Find all Kerberoastable users",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
        "allowCollapse": false
      }]
    },
    {
      "name": "Find users that can be AS-REP roasted",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
      }]
    },
    {
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
      }]
    },
    {
      "name": "Find all user with Constrained Delegation",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
      }]
    },
    {
      "name": "Find all Constrained Delegation objects",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p"
      }]
    },
    {
      "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN p"
      }]
    },
    {
      "name": "Find all computers with Unconstrained Delegation",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
      }]
    },
    {
      "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
      }]
    },
    {
      "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.GER AD",
      "category": "Kerberos",
      "queryList": [{
        "final": true,
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS DomänenController MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN DomänenController RETURN c2"
      }]
    },
    {
      "name": "Find an object from domain 'A' that can do anything to a foreign object",
      "category": "Domain",
      "requireNodeSelect": true,
      "queryList": [{
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(n {domain:$result})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find an object in one domain that can do something to a foreign object",
      "category": "Domain",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
      }]
    },
    {
      "name": "View all GPOs",
      "category": "Domain",
      "queryList": [{
        "final": true,
        "query": "Match (n:GPO) RETURN n"
      }]
    },
    {
      "name": "Find users that logged in within the last 90 days",
      "category": "User",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
      }]
    },
    {
      "name": "Find users that have never logged on and account is still active",
      "category": "User",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
      }]
    },
    {
      "name": "Find all sessions a user in a specific domain has",
      "category": "User",
      "requireNodeSelect": true,
      "queryList": [{
          "final": false,
          "title": "Select source domain...",
          "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:$result}) RETURN p",
          "startNode": "{}",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find users with passwords last set within the last 90 days",
      "category": "User",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
      }]
    },
    {
      "name": "Find all users a part of the VPN group",
      "category": "Group",
      "queryList": [{
        "final": true,
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
      }]
    },
    {
      "name": "Find groups that contain both users and computers",
      "category": "Group",
      "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
      }]
    },
    {
      "name": "Find if Domain Users group has control of other objects",
      "category": "Group",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (g:Group)-[{isacl:true}]->(m) WHERE g.objectid ENDS WITH '-513' RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find all computers without LAPS by OU",
      "category": "LAPS",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps=FALSE RETURN p"
      }]
    },
    {
      "name": "Find all computers without LAPS (HEAVY)",
      "category": "LAPS",
      "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer) WHERE c.haslaps = FALSE RETURN c"
      }]
    },
    {
      "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
      "category": "Database",
      "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
      }]
    },
    {
      "name": "Find all computers with unsupported operating systems till 2012/8.1",
      "category": "End of Life",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|2012|xp|vista|7|me|8|98|95).*' RETURN n"
      }]
    },
    {
      "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p"
      }]
    },
    {
      "name": "Return All On-Prem users with edges to Azure",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
      }]
    },
    {
      "name": "Shortest Path from Owned Azure Users to Azure VMs",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p = shortestPath((m:AZUser{owned: true})-[*..]->(n:AZVM)) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find all paths to an Azure VM",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
      }]
    },
    {
      "name": "Find all paths to an Azure KeyVault",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
      }]
    },
    {
      "name": "Return All Azure Users and their groups  (Warning: Heavy)",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
      }]
    },
    {
      "name": "Return GUEST Azure Users and their groups ",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' AND m.userprincipalname=~ '(?i).*#EXT#.*' RETURN p"
      }]
    },
    {
      "name": "Return All Azure Users and their Admin Roles",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(n)-[:AZHasRole|AZMemberOf*1..]->(:AZRole) RETURN p"
      }]
    },
    {
      "name": "Return All Azure Users and their owned Devices (Warning: Heavy)",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser) RETURN p"
      }]
    },
    {
      "name": "Return All Azure Admins and their owned Devices",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser)<-[r2:AZHasRole]->(n) RETURN p"
      }]
    },
    {
      "name": "Return All Azure AD groups  that are synchronized with On-Premise AD",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
      }]
    },
    {
      "name": "Find all Privileged Service principals",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
      }]
    },
    {
      "name": "Find all Owners of Azure Applications",
      "category": "Azure",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
      }]
    },
    {
      "name": "Find all owned Azure users",
      "category": "Azure - Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:AZUser{owned: true}) RETURN m"
      }]
    },
    {
      "name": "Find all owned Azure devices",
      "category": "Azure - Owned",
      "queryList": [{
        "final": true,
        "query": "MATCH (m:AZDevice{owned: true}) RETURN m"
      }]
    },
    {
      "name": "Return All Service Principals with MS Graph App Role Assignments",
      "category": "Azure - MS Graph",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:AZServicePrincipal)-[r:AZMGAppRoleAssignment_ReadWrite_All|AZMGApplication_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGServicePrincipalEndpoint_ReadWrite_All]->(n:AZServicePrincipal) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return all direct controllers of MS Graph",
      "category": "Azure - MS Graph",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (n)-[r:AZAddOwner|AZAddSecret|AZAppAdmin|AZCloudAppAdmin|AZMGAddOwner|AZMGAddSecret|AZOwns]->(g:AZServicePrincipal {appdisplayname: \"Microsoft Graph\"}) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find shortest paths to MS Graph",
      "category": "Azure - MS Graph",
      "queryList": [{
        "final": true,
        "query": "MATCH (n) WHERE NOT n.displayname=\"Microsoft Graph\" WITH n MATCH p = shortestPath((n)-[r*1..]->(g:AZServicePrincipal {appdisplayname: \"Microsoft Graph\"})) WHERE n<>g RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find all Privileged Service Principals",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
      }]
    },
    {
      "name": "Shortest path from Owned Azure Users to all Service Principals",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:AZUser {owned: true}), (m:AZServicePrincipal) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Shortest path from Owned Azure Users to all Service Principals that are Managed Identities",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:AZUser {owned: true}), (m:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'}) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Shortest path from ALL Azure Users to all Service Principals that are Managed Identities",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH (u:AZUser), (m:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'}) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "List all Azure Service Principals",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH (sp:AZServicePrincipal) RETURN sp",
        "allowCollapse": true
      }]
    },
    {
      "name": "List all Azure Service Principals that are Managed Identities",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH (sp:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'}) RETURN sp",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return all VMs with a tied Managed Identity",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(:AZVM)-[:AZManagedIdentity]->(n) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return all Service Principals that are a Managed Identity an have a path to a Key Vault",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(:AZVM)-[:AZManagedIdentity]->(n) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return paths from Managed Identities tied to a VM with a path to a Key Vault",
      "category": "Azure - Service Principals",
      "queryList": [{
        "final": true,
        "query": "MATCH p1 = (:AZVM)-[:AZManagedIdentity]->(n) WITH collect(n) AS managedIdentities MATCH p2 = (m:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'})-[*]->(kv:AZKeyVault) WHERE m IN managedIdentities RETURN p2",
        "allowCollapse": true
      }]
    },
    {
      "name": "List users possibly related to AADConnect",
      "category": "Azure - AADConnect",
      "queryList": [{
        "final": true,
        "query": "MATCH (u) WHERE (u:User OR u:AZUser) AND (u.name =~ '(?i)^MSOL_|.*AADConnect.*' OR u.userprincipalname =~ '(?i)^sync_.*') RETURN u",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return all Sessions of possibly AADConnect related Accounts",
      "category": "Azure - AADConnect",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(m:Computer)-[:HasSession]->(n) WHERE (n:User OR n:AZUser) AND ((n.name =~ '(?i)^MSOL_|.*AADConnect.*') OR (n.userPrincipalName =~ '(?i)^sync_.*')) RETURN p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Return all AADConnect Servers (extracted from the SYNC_ Account names)",
      "category": "Azure - AADConnect",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:AZUser) WHERE n.name =~ '(?i)^SYNC_(.*?)_(.*?)@.*' WITH n, split(n.name, '_')[1] AS computerNamePattern MATCH (c:Computer) WHERE c.name CONTAINS computerNamePattern RETURN c",
        "allowCollapse": true
      }]
    },
    {
      "name": "Shortest Path to AADConnect Servers from owned Users",
      "category": "Azure - AADConnect",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:AZUser) WHERE n.name =~ '(?i)^SYNC_(.*?)_(.*?)@.*' WITH n, split(n.name, '_')[1] AS computerNamePattern MATCH (c:Computer) WHERE c.name CONTAINS computerNamePattern WITH collect(c) AS computers MATCH p = shortestPath((u:User)-[*]-(c:Computer)) WHERE c IN computers AND length(p) > 0 AND u.owned = true RETURN u, p",
        "allowCollapse": true
      }]
    },
    {
      "name": "Find all Certificate Templates",
      "category": "Certificates",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n"
      }]
    },
    {
      "name": "Find enabled Certificate Templates",
      "category": "Certificates",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n"
      }]
    },
    {
      "name": "Find Certificate Authorities",
      "category": "Certificates",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n"
      }]
    },
    {
      "name": "Show Enrollment Rights for Certificate Template",
      "category": "Certificates",
      "queryList": [{
          "final": false,
          "title": "Select a Certificate Template...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Show Enrollment Rights for all enabled Certificate Template",
      "category": "Certificates",
      "queryList": [{
        "final": true,
        "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true return p",
        "allowCollapse": false
      }]
    },
    {
      "name": "Show Rights for Certificate Authority",
      "category": "Certificates",
      "queryList": [{
          "final": false,
          "title": "Select a Certificate Authority...",
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.name ORDER BY n.name"
        },
        {
          "final": true,
          "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC1)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
      }]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from owned principals (ESC1)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p"
      }]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates (ESC1)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g)-[*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p"
      }]
    },
    {
      "name": "Find Misconfigured Certificate Templates (ESC2)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or n.`Any Purpose` = True)  RETURN n"
      }]
    },
    {
      "name": "Shortest Paths to Misconfigured Certificate Templates from owned principals (ESC2)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True) return p"
      }]
    },
    {
      "name": "Find Enrollment Agent Templates (ESC3)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or n.`Any Purpose` = True or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n"
      }]
    },
    {
      "name": "Shortest Paths to Enrollment Agent Templates from owned principals (ESC3)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p"
      }]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p"
      }]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Template Access Control from owned principals (ESC4)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p"
      }]
    },
    {
      "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n"
      }]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE g<>n and n.type = 'Enrollment Service' RETURN p"
      }]
    },
    {
      "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from owned principals (ESC7)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p"
      }]
    },
    {
      "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n"
      }]
    },
    {
      "name": "Find Unsecured Certificate Templates (ESC9)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
      }]
    },
    {
      "name": "Find Unsecured Certificate Templates (ESC9)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true  RETURN n"
      }]
    },
    {
      "name": "Shortest Paths to Unsecured Certificate Templates from owned principals (ESC9)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE n.type = 'Certificate Template' and g<>n and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true and NONE(rel in r WHERE type(rel) in ['EnabledBy','Read','ManageCa','ManageCertificates']) return p"
      }]
    },
    {
      "name": "Find Certificate Authorities with Enforce Encryption not enabled (ESC11)",
      "category": "Admin Hunter - CA",
      "queryList": [{
        "final": true,
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Enforce Encryption for Requests` = 'Disabled' RETURN n"
      }]
    }
  ]
}